# Compiler and flags
CLANG ?= clang
GCC ?= gcc
ARCH := $(shell uname -m)

# Adjust KERNEL_HEADERS if your kernel headers are in a non-standard location
# Common locations:
# /usr/src/linux-headers-$(shell uname -r)/include/
# /lib/modules/$(shell uname -r)/build/include/
KERNEL_HEADERS ?= /usr/src/linux-headers-$(shell uname -r)/include/
# For BTF, ensure your kernel was compiled with CONFIG_DEBUG_INFO_BTF=y
# or that you have /sys/kernel/btf/vmlinux

BPF_CFLAGS := -g -O2 -target bpf -D__TARGET_ARCH_$(ARCH)
BPF_INCLUDES := -I/usr/include/$(ARCH)-linux-gnu \
                -I/usr/include \
                -I$(KERNEL_HEADERS) \
                -I.

USER_CFLAGS := -g -O2 -Wall
USER_LDFLAGS := -lbpf -lelf -lz

# Source files
BPF_SRC := bpf_kern.c
BPF_OBJ := $(BPF_SRC:.c=.o)

USER_SRC := loader.c
USER_BIN := loader

# Default target
all: $(BPF_OBJ) $(USER_BIN)

# Rule to build BPF object file
$(BPF_OBJ): $(BPF_SRC)
    $(CLANG) $(BPF_CFLAGS) $(BPF_INCLUDES) -c $< -o $@

# Rule to build userspace loader
$(USER_BIN): $(USER_SRC) $(BPF_OBJ) # Depend on BPF_OBJ if loader embeds it, otherwise not strictly needed for separate loading
    $(GCC) $(USER_CFLAGS) $< -o $@ $(USER_LDFLAGS)

# Clean target
clean:
    rm -f $(BPF_OBJ) $(USER_BIN)
    rm -f *~

.PHONY: all clean

# Example usage:
# make
# sudo ./loader
# make clean