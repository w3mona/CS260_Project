# Compiler and tools
CLANG ?= clang
GCC ?= gcc
BPFTOOL ?= bpftool
LLVM_STRIP ?= llvm-strip

# Determine architecture for __TARGET_ARCH_xxx and kernel paths
ARCH := $(shell uname -m | sed 's/x86_64/x86/' | sed 's/aarch64/arm64/' | sed 's/riscv64/riscv/')

# Kernel headers location (base directory)
KERNEL_VERSION ?= $(shell uname -r)
KERNEL_BASE_DIR ?= /usr/src/linux-headers-$(KERNEL_VERSION)
KERNEL_HEADERS := $(KERNEL_BASE_DIR)/include

# --- Source Files ---
# Adjust these names if your C files are named differently
BPF_SRC_FILE := bpf_kern.c
USER_SRC_FILE := loader.c

# --- Directories and Files ---
BUILD_DIR := ./build
BPF_OUT_DIR := $(BUILD_DIR)/bpf
BPF_INTERNAL_INCLUDE_DIR := $(BPF_OUT_DIR)/internal # For vmlinux.h

# Output files
BPF_OBJ_NAME := $(notdir $(BPF_SRC_FILE:.c=.o))
BPF_OBJ := $(BPF_OUT_DIR)/$(BPF_OBJ_NAME)
BPF_SKELETON_NAME := $(notdir $(BPF_SRC_FILE:.c=.skel.h))
BPF_SKELETON := $(BPF_OUT_DIR)/$(BPF_SKELETON_NAME)
USER_BIN_NAME := $(notdir $(USER_SRC_FILE:.c=))
USER_BIN := $(BUILD_DIR)/$(USER_BIN_NAME)
VMLINUX_H := $(BPF_INTERNAL_INCLUDE_DIR)/vmlinux.h

# List of all directories to create
REQUIRED_DIRS := $(BPF_OUT_DIR) $(BPF_INTERNAL_INCLUDE_DIR) $(BUILD_DIR)

# --- Compiler Flags ---
# More granular kernel include paths
KERNEL_ARCH_INCLUDE_DIR := $(KERNEL_BASE_DIR)/arch/$(ARCH)/include
KERNEL_UAPI_INCLUDE_DIR := $(KERNEL_HEADERS)/uapi
KERNEL_GENERATED_INCLUDE_DIR := $(KERNEL_HEADERS)/generated
KERNEL_GENERATED_UAPI_INCLUDE_DIR := $(KERNEL_GENERATED_INCLUDE_DIR)/uapi
KERNEL_ARCH_UAPI_INCLUDE_DIR := $(KERNEL_ARCH_INCLUDE_DIR)/uapi
KERNEL_ARCH_GENERATED_INCLUDE_DIR := $(KERNEL_ARCH_INCLUDE_DIR)/generated
KERNEL_ARCH_GENERATED_UAPI_INCLUDE_DIR := $(KERNEL_ARCH_GENERATED_INCLUDE_DIR)/uapi

# BPF compiler flags (includes integrated)
BPF_CFLAGS := -g -O2 -target bpf \
              -D__TARGET_ARCH_$(ARCH) \
              -D__BPF_TRACING__ \
              -Wall -Werror \
              -I$(BPF_INTERNAL_INCLUDE_DIR) \
              -I/usr/include/bpf \
              -I$(KERNEL_HEADERS) \
              -I$(KERNEL_UAPI_INCLUDE_DIR) \
              -I$(KERNEL_GENERATED_INCLUDE_DIR) \
              -I$(KERNEL_GENERATED_UAPI_INCLUDE_DIR) \
              -I$(KERNEL_ARCH_INCLUDE_DIR) \
              -I$(KERNEL_ARCH_UAPI_INCLUDE_DIR) \
              -I$(KERNEL_ARCH_GENERATED_INCLUDE_DIR) \
              -I$(KERNEL_ARCH_GENERATED_UAPI_INCLUDE_DIR) \
              -I. # Include current directory

# User-space compiler flags
USER_CFLAGS := -g -O2 -Wall -Werror -Wno-unknown-attributes -I$(BPF_OUT_DIR)
USER_LDFLAGS := -lbpf -lelf -lz

# --- Phony Targets ---
.PHONY: all clean directories

# --- Main Targets ---
all: directories $(USER_BIN)

# Rule to create all necessary directories
directories:
	@echo "Creating directories: $(REQUIRED_DIRS)"
	@mkdir -p $(REQUIRED_DIRS)

# Rule for the user-space binary
$(USER_BIN): $(USER_SRC_FILE) $(BPF_SKELETON)
	@echo "Compiling userspace program: $(USER_SRC_FILE) -> $@"
	$(GCC) $(USER_CFLAGS) $(USER_SRC_FILE) -o $@ $(USER_LDFLAGS)

# Rule to generate BPF skeleton header
$(BPF_SKELETON): $(BPF_OBJ)
	@echo "Generating BPF skeleton header: $@"
	$(BPFTOOL) gen skeleton $< > $@

# Rule for the BPF object file
$(BPF_OBJ): $(BPF_SRC_FILE) $(VMLINUX_H)
	@echo "Compiling BPF code: $(BPF_SRC_FILE) -> $@"
	$(CLANG) $(BPF_CFLAGS) -c $(BPF_SRC_FILE) -o $@

# Rule to generate vmlinux.h (for CO-RE)
$(VMLINUX_H): | directories
	@echo "Generating vmlinux.h for BPF CO-RE (requires /sys/kernel/btf/vmlinux)..."
	@echo "Target file for vmlinux.h is: [$(VMLINUX_H)]"
	@if [ ! -f /sys/kernel/btf/vmlinux ]; then \
		echo "Error: /sys/kernel/btf/vmlinux not found. BTF must be enabled in your kernel."; \
		echo "Try: sudo modprobe vmlinux_btf OR ensure CONFIG_DEBUG_INFO_BTF=y in kernel config."; \
		exit 1; \
	fi
	$(BPFTOOL) btf dump file /sys/kernel/btf/vmlinux format c > "$(VMLINUX_H)"

# --- Cleaning ---
clean:
	@echo "Cleaning up build artifacts..."
	rm -f $(USER_BIN) $(BPF_SKELETON)
	rm -rf $(BUILD_DIR)
	rm -f *~